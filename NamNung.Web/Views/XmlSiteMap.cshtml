@using NamNung.Web.Factories;
@inherits Umbraco.Web.Mvc.UmbracoViewPage

@{
    Layout = null;
    Response.ContentType = "text/xml";
    var siteHomePage = Model.Root();
    var maxSiteMapDepth = Model.HasValue("maxSiteMapDepth") ? Model.Value<int>("maxSiteMapDepth") : int.MaxValue;
    string excludedDocumentTypeList = Model.Value<string>("excludedDocumentTypes") ?? "xmlSiteMap";
    string[] excludedDocumentTypes = (!String.IsNullOrEmpty(excludedDocumentTypeList)) ? excludedDocumentTypeList.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries).Select(p => p.Trim()).ToArray() : new string[] { };
}

<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemalocation="http://www.google.com/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd" xmlns:image="http://www.google.com/schemas/sitemap-image/1.1">
    @RenderSiteMapUrlEntry(siteHomePage)
    @RenderSiteMapUrlEntriesForChildren(siteHomePage, maxSiteMapDepth, excludedDocumentTypes)
</urlset>

@helper RenderSiteMapUrlEntry(IPublishedContent node)
{
if (!node.IsVisible() || string.IsNullOrEmpty(node.GetTemplateAlias()))
{
    return;
}

var changeFreq = node.Value("searchEngineChangeFrequency", fallback: Fallback.To(Fallback.Ancestors, Fallback.DefaultValue), defaultValue: "monthly");
changeFreq = ComputeChangeFreq(changeFreq);
var priority = node.HasValue("searchEngineRelativePriority") ? node.Value<string>("searchEngineRelativePriority") : "0.5";

var languageLinks = NavigationFactory.GetLanguageMenu(node);
foreach (var languageLink in languageLinks)
{
        <url>
            <loc>@EnsureUrlStartsWithDomain(languageLink.FullUrl)</loc>
            <lastmod>@(string.Format("{0:s}+00:00", node.UpdateDate))</lastmod>
            <changefreq>@changeFreq</changefreq>
            <priority>@priority</priority>
        </url>
    }
}

@functions {
    private static string EnsureUrlStartsWithDomain(string url)
    {
        if (url.StartsWith("http"))
        {
            return url;
        }
        else
        {
            var domainPrefix = string.Format("https://{0}", HttpContext.Current.Request.ServerVariables["HTTP_HOST"]);
            return domainPrefix + url;
        }
    }

    private string ComputeChangeFreq(string value)
    {
        switch (value)
        {
            case "luôn luôn":
                return "always";
            case "hàng giờ":
                return "hourly";
            case "hàng ngày":
                return "daily";
            case "hàng tuần":
                return "weekly";
            case "hàng tháng":
                return "monthly";
            case "hàng năm":
                return "yearly";
            case "không bao giờ":
                return "never";
        }

        return string.Empty;
    }
}

@helper RenderSiteMapUrlEntriesForChildren(IPublishedContent parentPage, int maxSiteMapDepth, string[] excludedDocumentTypes)
{
    foreach (var page in parentPage.Children.Where(f => !excludedDocumentTypes.Contains(f.ContentType.Alias) && !f.Value<bool>("hideFromXmlSiteMap")))
    {
        @RenderSiteMapUrlEntry(page)
        if (page.Level < maxSiteMapDepth && page.Children.Any(f => !excludedDocumentTypes.Contains(f.ContentType.Alias) && !f.Value<bool>("hideFromXmlSiteMap")))
        {
            @RenderSiteMapUrlEntriesForChildren(page, maxSiteMapDepth, excludedDocumentTypes)
        }
    }
}